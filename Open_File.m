function matrix=Open_File(filename)


 [~,~,ext] = fileparts(filename);

             if ext==".xyz"
                 matrix=Open_XYZ_file(filename);

            elseif ext==".datx" 

               [matrix,~]=Open_DATX_file(filename);

             end

            

end


function Outis=Open_XYZ_file(filename)

S = readlines(filename); % Считываем файл

n=length(S); % Число строк

 k=1;


  for i=1:1:20

        A=strsplit(S(i));

 

  if (strcmp(A,'#'))==true % Если строка - #, то со следующего элемента 
      % мы начинаем перетаскивать файл в массив с 3 столбцами по уму нужно
      % бы сделать это до последней решетки, но..

      

      B=zeros(n-i-3,3);

      for j=i+1:n-2

         A=strsplit(S(j));

        B(k,:)=str2double(A(1:3));

        k=k+1;

     end
   end
  end


 Outis  = FromThreeToMatrix(B);
%   C=delete_zeros(Outis);


 %figure, imagesc(C)

end


function Outis  = FromThreeToMatrix(In)
% Функция из формата X Y Z делает матрицу Z


% Outis=zeros(1000,1000);



        [dimension, ~]=size(In);

        J=zeros(1,dimension);
        I=zeros(1,dimension);

              for j=1:dimension

                J(j)=In(j,1); % Столбцы
                I(j)=In(j,2); % Строки

               end



    Value=zeros(1,dimension);

                for j=1:1:dimension

                      if isnan(In(j,3))
                Value(j)= 0;
                     else 
                Value(j)= In(j,3);

                     end
                end


    Isize=max(I)-min(I)+1;
    Jsize=max(J)-min(J)+1;
    matrix=zeros(Isize,Jsize);

    k=1;

    j=1;

     for l=1:1:dimension
      matrix(k,j)=Value(l);

    if j==Jsize

        k=k+1;
       j=1;

    else

     j=j+1;

    end
     end


    Outis(1:Isize,1:Jsize)=matrix(1:Isize,1:Jsize);





end
 

 function [Surface, Interferogram]=Open_DATX_file(fileName)

% fileName='Full.datx';

% [fileRoot, filePath] = uigetfile({'*.xyz';'*.datx'},'File Selector','multiselect','on');
% 
%  fileName = fullfile(filePath, fileRoot);
% 
Out = ReadDatx(fileName);

Surface=Out.Surface.matrix;

Surface(isnan(Surface))= 0;

Interferogram=Out.Intensity.matrix;



end

function Out = ReadDatx(fileName)

%ReadDatx   Extract maps stored in a .datx file generated by ZYGO's Mx software

%   ReadDatx(fileName) reads data from the specified file. If 'fileName' is

%   not specified a file browser dialog will appear.

% 

%   The output is a structure with fields for each extracted map, typically

%   including Surface and Intensity. Other possible fields include

%   Thickness, Substrate, and Color.

% 

%   Each top-level field is itself a structure with contents:

%       - matrix            Raw map data

%       - zUnit              Unit (in Z) for map data

%       - xySampling   1x2 array of lateral pixel sampling in (X,Y)

%       - xyUnit            Lateral units (in X,Y)

% 

%   Copyright 2018-2019 ZYGO Corporation

 

global MetaData MeasurementNode FileName

MeasurementNode = '';

Out = [];

 

%% Open the HDF5 file

if ~exist('fileName', 'var')

   [fileRoot, filePath] = uigetfile('*.datx');

   FileName = fullfile(filePath, fileRoot);

  if isequal(FileName,0)

      return

  end

else

   FileName = fileName;

end

 

% if ~exist(FileName, 'file')
% 
%    error('Could not find file ''%s''', FileName);
% 
% end

 

%% Read MetaData

MetaData = h5read(FileName, '/MetaData');

MeasurementNode = GetNode('Root', 'Measurement');

 

if isempty(MeasurementNode)

   error('No measurement node found');

end

 

%% Surface data

surfacePath = GetMapNode('Surface');





if isempty(surfacePath)

   disp('No surface data');

else

   Out.Surface = ExtractZData(surfacePath);
  

%    PlotHeightData(Out.Surface, 'Surface');


%    fprintf('Extracted surface data\n');

end

 

%% Thickness data

thicknessPath = GetMapNode('Thickness');

if ~isempty(thicknessPath)

   Out.Thickness = ExtractZData(thicknessPath);

%    PlotHeightData(Out.Thickness, 'Thickness');

   fprintf('Extracted thickness data\n');

end

 

%% Bottom surface (substrate) data

substratePath = GetMapNode('Bottom Surface');

if ~isempty(substratePath)

   Out.Substrate = ExtractZData(substratePath);

%    PlotHeightData(Out.Substrate, 'Substrate');

   fprintf('Extracted substrate data\n');

end

 

%% Intensity data

intensityPath = GetMapNode('Intensity');

if isempty(intensityPath)

   disp('No intensity data');

else

   Out.Intensity = ExtractZData(intensityPath);

%    PlotIntensityData(Out.Intensity, 'Intensity');

%    fprintf('Extracted intensity data\n');

end

 

%% Color data

colorPath = GetMapNode('ColorData');

if ~isempty(colorPath)

   colorHdf = GetMapHdf(colorPath, true);

 

    % Extract (R,G,B) components

   [sizeY, sizeX] = size(colorHdf.matrix);

   Out.Color = [];

   Out.Color.matrix = zeros(sizeY, sizeX/3, 3);

   Out.Color.matrix(:,:,1) = colorHdf.matrix(:, 1:3:end);

   Out.Color.matrix(:,:,2) = colorHdf.matrix(:, 2:3:end);

   Out.Color.matrix(:,:,3) = colorHdf.matrix(:, 3:3:end);

   Out.Color.matrix  = Out.Color.matrix  / (pow2(16) - 1);

 

    % Get lateral data

   [Out.Color.xySampling, Out.Color.xyUnit] = GetLateralSamplingWithUnits(colorHdf);

   [~,~, xVector, yVector] = GetLateralGrid(Out.Color.xySampling, [sizeY, sizeX/3]);    

 

    % Plot color map
%     subplot(1,2,1)

%    figure('Name','Color', 'NumberTitle','off');

   image(xVector, yVector, flipud(Out.Color.matrix));

   SetupAxesAndLabels('Color', Out.Color.xyUnit, '')

 

   fprintf('Extracted color data\n');

end
end


%% Support functions

% Assumes MetatData and MeasurementNode are properly defined

function mapNode = GetMapNode(dataName)

global MeasurementNode

mapNode = '';

% Get Data Information node

infoNode = GetNode(MeasurementNode, dataName);

if ~isempty(infoNode)

   mapNode = GetNode(infoNode, 'Path');

end

end

 

function node = GetNode(source, link)

global MetaData

node = '';

sourceMatch = strcmp(source, MetaData.Source);

linkMatch = strcmp(link, MetaData.Link);

iNode = find(sourceMatch & linkMatch);

if ~isempty(iNode)

   node = MetaData.Destination{iNode};

end

end

function mapData = GetMapHdf(node, isColorData)

global FileName

if ~exist('isColorData', 'var')

   isColorData = false;

end

mapData = [];

try

   mapData.matrix = rot90(h5read(FileName, node));

catch ME

  if (strfind(ME.message, 'szip'))

       fprintf(2, ['\nFile uses szip compression, which is not supported by this demonstration script.\n' 

       'This may indicate that the .datx file was created using a very early version of Mx,\n' ...

       'in which case a remedy is to load into Mx and resave.\n\n']);

  end

 rethrow(ME)

end

mapData.xConverter = h5readatt(FileName, node, 'X Converter');

mapData.yConverter = h5readatt(FileName, node, 'Y Converter');

if ~isColorData

   mapData.zConverter = h5readatt(FileName, node, 'Z Converter');

   mapData.NoDataVal = h5readatt(FileName, node, 'No Data');

  if ~isnan(mapData.NoDataVal)

       mapData.matrix(mapData.matrix >= mapData.NoDataVal) = NaN;

    end

else

   mapData.zConverter = [];

   mapData.NoDataVal = [];

end

 
end 


function zData = ExtractZData(node)

zData = [];

mapHdf = GetMapHdf(node);


[zData.matrix, zData.zUnit] = GetZDataWithUnits(mapHdf);
% imagesc(zData.matrix)



[zData.xySampling, zData.xyUnit] = GetLateralSamplingWithUnits(mapHdf);
% size(zData.xySampling)

end


function [height, unitOut] = GetZDataWithUnits(mapHdf)

unitOut = 'um';

unitIn = mapHdf.zConverter.BaseUnit{:}; 

switch unitIn

    case 'NanoMeters'

       zScale = 1e-3;

    case 'MicroMeters'

       zScale = 1e+0;

    case 'MilliMeters'

       zScale = 1e+3;

    case 'Meters'

       zScale = 1e+6;

    case 'Fringes'

       S = mapHdf.zConverter.Parameters{:}(3);

       O = mapHdf.zConverter.Parameters{:}(4);

       W = mapHdf.zConverter.Parameters{:}(2);

       zScale = 1e6 * S * O * W;

    otherwise

       unitOut = unitIn;

       zScale = 1;

end

height = mapHdf.matrix * zScale;



end


function [xySampling, unit] = GetLateralSamplingWithUnits(mapHdf)

xRes_um = 1e6 * mapHdf.xConverter.Parameters{:}(2);

yRes_um = 1e6 * mapHdf.yConverter.Parameters{:}(2);

if (xRes_um > 0 && yRes_um > 0)

   xySampling = [xRes_um, yRes_um];

   unit = 'um';

else

   xySampling = [1, 1];

   unit = 'pix';

end

end


function [X, Y, x, y] = GetLateralGrid(xySampling, mapSize)

x = (0 : mapSize(2) - 1) * xySampling(1);

y = (0 : mapSize(1) - 1) * xySampling(2);

[Y, X] = ndgrid(y, x);

end


% function hFig = PlotHeightData(mapData, label)
% 
% [X, Y] = GetLateralGrid(mapData.xySampling, size(mapData.matrix));
% 
% hFig = figure('Name',label, 'NumberTitle','off');
% 
% 
% % surf(X, Y, mapData.matrix);
% % subplot(1,2,2)
% %  figure,
% % % imagesc(mapData.matrix)
% % 
% % shading flat;
% 
% SetupAxesAndLabels(label, mapData.xyUnit, mapData.zUnit)
% 
% end


% function hFig = PlotIntensityData(mapData, label)
% 
% hFig = PlotHeightData(mapData, label);
% 
% colormap gray;
% 
% view([0 90]);
% 
% end


function SetupAxesAndLabels(plotTitle, latUnit, zUnit)

title(plotTitle);

rawAspect = daspect();

daspect(rawAspect([1 1 3]));

xlabel(sprintf('X [%s]', latUnit));

ylabel(sprintf('Y [%s]', latUnit));

zlabel(sprintf('Z [%s]', zUnit));

axis tight;

end
